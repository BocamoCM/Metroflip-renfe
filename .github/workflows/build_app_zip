name: "UFBT Build and Test App"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install UFBT
        run: |
          python3 -m pip install --upgrade pip
          pip install ufbt
          
      - name: Initialize UFBT Environment
        run: |
          ufbt update --index-url=https://update.flipperzero.one/firmware/directory.json --channel=release
          ufbt vscode_dist
          
      - name: Build FAP Applications
        run: |
          set -e
          ufbt faps
          
      - name: Debug Show Build Output
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo ""
          echo "=== UFBT build directory contents ==="
          ls -la ~/.ufbt/build/ 2>/dev/null || echo "UFBT build directory not found"
          echo ""
          echo "=== Local dist directory contents ==="
          ls -la dist/ 2>/dev/null || echo "Local dist directory not found"
          echo ""
          echo "=== Looking for .fal files (compiled Flipper apps) ==="
          find ~/.ufbt/build/ -name "*.fal" 2>/dev/null || echo "No .fal files found in UFBT build"
          find . -name "*.fal" 2>/dev/null || echo "No .fal files found in current directory"
          echo ""
          echo "=== Looking for .fap files ==="
          find . -name "*.fap" 2>/dev/null || echo "No .fap files found"
          echo ""
          echo "=== Looking for .elf files ==="
          find ~/.ufbt/build/ -name "*.elf" 2>/dev/null || echo "No .elf files found in UFBT build"
          find . -name "*.elf" 2>/dev/null || echo "No .elf files found in current directory"
          
     - name: Organizar Artefactos de Build
        run: |
          echo "Organizando artefactos de build..."
          mkdir -p build_output
          
          # Copiar aplicación principal desde dist
          if [ -f "dist/metroflip.fap" ]; then
            cp dist/metroflip.fap build_output/
            echo "✓ Copiado metroflip.fap desde dist/"
          fi
          
          # Copiar archivo debug desde dist
          if [ -f "dist/debug/metroflip_d.elf" ]; then
            cp dist/debug/metroflip_d.elf build_output/
            echo "✓ Copiado metroflip_d.elf desde dist/debug/"
          fi
          
          # Copiar todos los plugins debug desde dist
          if [ -d "dist/debug" ]; then
            find dist/debug -name "*_plugin_d.elf" -exec cp {} build_output/ \;
            plugin_debug_count=$(find dist/debug -name "*_plugin_d.elf" | wc -l)
            echo "✓ Copiados $plugin_debug_count archivos debug de plugins"
          fi
          
          # Copiar plugins FAL
          if [ -d "dist" ]; then
            mkdir -p build_output/plugins
            find dist -name "*.fal" -exec cp {} build_output/plugins/ \;
            plugin_count=$(find dist -name "*.fal" | wc -l)
            echo "✓ Copiados $plugin_count archivos de plugins (.fal)"
          fi
          
          # Crear información del build
          echo "Metroflip RENFE - Información del Build" > build_output/BUILD_INFO.txt
          echo "=====================================" >> build_output/BUILD_INFO.txt
          echo "Fecha del Build: $(date)" >> build_output/BUILD_INFO.txt
          echo "Repositorio: Metroflip-renfe" >> build_output/BUILD_INFO.txt
          echo "Target: 7, API: 86.0" >> build_output/BUILD_INFO.txt
          echo "Commit: $GITHUB_SHA" >> build_output/BUILD_INFO.txt
          echo "" >> build_output/BUILD_INFO.txt
          echo "Sistemas de Transporte Soportados:" >> build_output/BUILD_INFO.txt
          echo "- BIP (Bay Area)" >> build_output/BUILD_INFO.txt
          echo "- Calypso (Navigo, Opus, RavKav, Intercode)" >> build_output/BUILD_INFO.txt
          echo "- CharlieCard (Boston MBTA)" >> build_output/BUILD_INFO.txt
          echo "- Clipper (San Francisco Bay Area)" >> build_output/BUILD_INFO.txt
          echo "- Go Card (Brisbane, Australia)" >> build_output/BUILD_INFO.txt
          echo "- ITSO (Reino Unido)" >> build_output/BUILD_INFO.txt
          echo "- MetroMoney" >> build_output/BUILD_INFO.txt
          echo "- Myki (Melbourne, Australia)" >> build_output/BUILD_INFO.txt
          echo "- Opal (Sydney, Australia)" >> build_output/BUILD_INFO.txt
          echo "- RENFE (España) ⭐" >> build_output/BUILD_INFO.txt
          echo "- SmartRider (Perth, Australia)" >> build_output/BUILD_INFO.txt
          echo "- Suica (Japón)" >> build_output/BUILD_INFO.txt
          echo "- Troika (Moscú, Rusia)" >> build_output/BUILD_INFO.txt
          echo "" >> build_output/BUILD_INFO.txt
          echo "Archivos del Build:" >> build_output/BUILD_INFO.txt
          ls -la build_output/ >> build_output/BUILD_INFO.txt
          
          echo ""
          echo "=== Artefactos finales del build ==="
          ls -la build_output/
          if [ -d build_output/plugins ]; then
            echo ""
            echo "=== Plugins ==="
            ls -la build_output/plugins/
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metroflip-renfe-build
          path: build_output/
          if-no-files-found: error
          retention-days: 30
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metroflip-build-artifacts
          path: build_output/
          if-no-files-found: warn
          retention-days: 30
          
      - name: Verify Upload Contents
        run: |
          echo "=== Final verification of artifacts to upload ==="
          if [ -d build_output ]; then
            echo "Build output directory contents:"
            find build_output -type f -exec ls -la {} \;
            echo ""
            echo "Total files to upload: $(find build_output -type f | wc -l)"
            
            # Check for main app file
            if [ -f build_output/metroflip.fap ]; then
              echo "✓ Main application file (metroflip.fap) ready for upload"
              ls -lh build_output/metroflip.fap
            else
              echo "⚠️ Main application file not found"
            fi
            
            # Check for plugins
            if [ -d build_output/plugins ]; then
              plugin_count=$(ls build_output/plugins/*.fal 2>/dev/null | wc -l)
              echo "✓ $plugin_count plugin files ready for upload"
            else
              echo "⚠️ No plugin files found"
            fi
            
          else
            echo "ERROR: build_output directory was not created"
            exit 1
          fi
