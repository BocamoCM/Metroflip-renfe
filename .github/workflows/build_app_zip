name: "UFBT Build and Test App"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install UFBT
        run: |
          python3 -m pip install --upgrade pip
          pip install ufbt
          
      - name: Initialize UFBT Environment
        run: |
          ufbt update --index-url=https://update.flipperzero.one/firmware/directory.json --channel=release
          ufbt vscode_dist
          
      - name: Build FAP Applications
        run: |
          set -e
          ufbt faps
          
      - name: Debug Show Build Output
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo ""
          echo "=== UFBT build directory contents ==="
          ls -la ~/.ufbt/build/ 2>/dev/null || echo "UFBT build directory not found"
          echo ""
          echo "=== Local dist directory contents ==="
          ls -la dist/ 2>/dev/null || echo "Local dist directory not found"
          echo ""
          echo "=== Looking for .fal files (compiled Flipper apps) ==="
          find ~/.ufbt/build/ -name "*.fal" 2>/dev/null || echo "No .fal files found in UFBT build"
          find . -name "*.fal" 2>/dev/null || echo "No .fal files found in current directory"
          echo ""
          echo "=== Looking for .fap files ==="
          find . -name "*.fap" 2>/dev/null || echo "No .fap files found"
          echo ""
          echo "=== Looking for .elf files ==="
          find ~/.ufbt/build/ -name "*.elf" 2>/dev/null || echo "No .elf files found in UFBT build"
          find . -name "*.elf" 2>/dev/null || echo "No .elf files found in current directory"
          
      - name: Organize Build Artifacts
        run: |
          echo "Organizing build artifacts..."
          mkdir -p build_output
          
          # Track if we found any artifacts
          artifacts_found=false
          
          # Copy the main FAP file from dist
          if [ -f "dist/metroflip.fap" ]; then
            cp dist/metroflip.fap build_output/
            echo "✓ Copied metroflip.fap from dist/"
            artifacts_found=true
          fi
          
          # Copy debug ELF file from dist
          if [ -f "dist/debug/metroflip_d.elf" ]; then
            cp dist/debug/metroflip_d.elf build_output/
            echo "✓ Copied debug ELF from dist/debug/"
            artifacts_found=true
          fi
          
          # Copy from UFBT build directory as backup
          if [ -f ~/.ufbt/build/metroflip.fap ]; then
            cp ~/.ufbt/build/metroflip.fap build_output/metroflip_ufbt.fap
            echo "✓ Copied metroflip.fap from UFBT build/"
            artifacts_found=true
          fi
          
          # Copy debug ELF from UFBT build directory
          if [ -f ~/.ufbt/build/metroflip_d.elf ]; then
            cp ~/.ufbt/build/metroflip_d.elf build_output/metroflip_d_ufbt.elf
            echo "✓ Copied debug ELF from UFBT build/"
            artifacts_found=true
          fi
          
          # Copy plugin FAL files
          if [ -d ~/.ufbt/build/metroflip/assets/plugins/ ]; then
            mkdir -p build_output/plugins
            if ls ~/.ufbt/build/metroflip/assets/plugins/*.fal 1> /dev/null 2>&1; then
              cp ~/.ufbt/build/metroflip/assets/plugins/*.fal build_output/plugins/
              echo "✓ Copied $(ls ~/.ufbt/build/metroflip/assets/plugins/*.fal | wc -l) plugin FAL files"
              artifacts_found=true
            fi
          fi
          
          # Copy any additional files from dist
          if [ -d "dist" ]; then
            find dist -name "*.fap" -o -name "*.elf" -o -name "*.fal" | while read file; do
              if [ ! -f "build_output/$(basename "$file")" ]; then
                cp "$file" build_output/
                echo "✓ Copied additional file: $(basename "$file")"
                artifacts_found=true
              fi
            done
          fi
          
          # Create build info
          echo "Metroflip Build Information" > build_output/BUILD_INFO.txt
          echo "===========================" >> build_output/BUILD_INFO.txt
          echo "Build Date: $(date)" >> build_output/BUILD_INFO.txt
          echo "Repository: Metroflip-renfe" >> build_output/BUILD_INFO.txt
          echo "Target: 7, API: 86.0" >> build_output/BUILD_INFO.txt
          echo "UFBT Version: $(pip show ufbt | grep Version || echo 'Unknown')" >> build_output/BUILD_INFO.txt
          echo "Python Version: $(python3 --version)" >> build_output/BUILD_INFO.txt
          echo "" >> build_output/BUILD_INFO.txt
          echo "Build Artifacts:" >> build_output/BUILD_INFO.txt
          ls -la build_output/ >> build_output/BUILD_INFO.txt
          echo "" >> build_output/BUILD_INFO.txt
          echo "Supported Transit Systems:" >> build_output/BUILD_INFO.txt
          echo "- BIP (Bay Area)" >> build_output/BUILD_INFO.txt
          echo "- Calypso" >> build_output/BUILD_INFO.txt
          echo "- CharlieCard (Boston)" >> build_output/BUILD_INFO.txt
          echo "- Clipper (San Francisco)" >> build_output/BUILD_INFO.txt
          echo "- Go Card (Brisbane)" >> build_output/BUILD_INFO.txt
          echo "- ITSO (UK)" >> build_output/BUILD_INFO.txt
          echo "- MetroMoney" >> build_output/BUILD_INFO.txt
          echo "- Myki (Melbourne)" >> build_output/BUILD_INFO.txt
          echo "- Opal (Sydney)" >> build_output/BUILD_INFO.txt
          echo "- RENFE (Spain)" >> build_output/BUILD_INFO.txt
          echo "- SmartRider (Perth)" >> build_output/BUILD_INFO.txt
          echo "- Suica (Japan)" >> build_output/BUILD_INFO.txt
          echo "- Troika (Moscow)" >> build_output/BUILD_INFO.txt
          
          if [ "$artifacts_found" = true ]; then
            echo ""
            echo "=== Final build artifacts ==="
            ls -la build_output/
            echo ""
            echo "SUCCESS: Build artifacts collected successfully!"
          else
            echo "WARNING: No build artifacts found"
            echo "Creating debug info..."
            
            echo "=== Debug Information ===" >> build_output/DEBUG_INFO.txt
            echo "Current directory:" >> build_output/DEBUG_INFO.txt
            pwd >> build_output/DEBUG_INFO.txt
            echo "Directory contents:" >> build_output/DEBUG_INFO.txt
            ls -la >> build_output/DEBUG_INFO.txt
            echo "UFBT directory contents:" >> build_output/DEBUG_INFO.txt
            ls -la ~/.ufbt >> build_output/DEBUG_INFO.txt 2>&1 || echo "Cannot access ~/.ufbt" >> build_output/DEBUG_INFO.txt
          fi
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metroflip-build-artifacts
          path: build_output/
          if-no-files-found: warn
          retention-days: 30
          
      - name: Verify Upload Contents
        run: |
          echo "=== Final verification of artifacts to upload ==="
          if [ -d build_output ]; then
            echo "Build output directory contents:"
            find build_output -type f -exec ls -la {} \;
            echo ""
            echo "Total files to upload: $(find build_output -type f | wc -l)"
            
            # Check for main app file
            if [ -f build_output/metroflip.fap ]; then
              echo "✓ Main application file (metroflip.fap) ready for upload"
              ls -lh build_output/metroflip.fap
            else
              echo "⚠️ Main application file not found"
            fi
            
            # Check for plugins
            if [ -d build_output/plugins ]; then
              plugin_count=$(ls build_output/plugins/*.fal 2>/dev/null | wc -l)
              echo "✓ $plugin_count plugin files ready for upload"
            else
              echo "⚠️ No plugin files found"
            fi
            
          else
            echo "ERROR: build_output directory was not created"
            exit 1
          fi
